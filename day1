
1.注释
# 井号后是注释
​
'''
这是多行注释
'''
"""
这也是多行注释
"""
​
print("hello world")
​
2.运算符
## 操作符  名称  示例
+   加   1 + 1
-   减   2 - 1
*   乘   3 * 4
/   除   3 / 4
//  整除（地板除） 3 // 4
%   取余  3 % 4
**  幂   2 ** 3
操作符 名称  示例
>   大于  2 > 1
>=  大于等于    2 >= 4
<   小于  1 < 2
<=  小于等于    5 <= 2
==  等于  3 == 4
!=  不等于 3 != 5
**类型转换**
​
- 转换为整型 `int(x, base=10)`
- 转换为字符串 `str(object='')`
- 转换为浮点型 `float(x)`
## 5. print() 函数
​
print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False) #sep
# 位运算
​
## 1. 原码、反码和补码
​
二进制有三种不同的表示形式：原码、反码和补码，<u>计算机内部使用补码来表示</u>。
**原码**：就是其二进制表示（注意，有一位符号位）。
**反码**：正数的反码就是原码，负数的反码是符号位不变，其余位取反（对应正数按位取反）。
**补码**：正数的补码就是原码，负数的补码是反码+1。
**符号位**：最高位为符号位，0表示正数，1表示负数。在位运算中符号位也参与运算。
## 2. 按位运算
- 按位与操作 &  
1 & 1 = 1
1 & 0 = 0
0 & 1 = 0
0 & 0 = 0
只有两个对应位都为 1 时才为 1
- 按位或操作 |
1 | 1 = 1
1 | 0 = 1
0 | 1 = 1
0 | 0 = 0
只要两个对应位中有一个 1 时就为 1
- 按位异或操作 ^
只有两个对应位不同时才为 1
异或操作的性质：满足交换律和结合律
- 按位左移操作 <<
​
`num << i` 将`num`的二进制表示向左移动`i`位所得的值。
- 按位右移操作 >>
​
`num >> i` 将`num`的二进制表示向右移动`i`位所得的值。
​
通过 `<<`，`>>` 快速计算2的倍数问题。
